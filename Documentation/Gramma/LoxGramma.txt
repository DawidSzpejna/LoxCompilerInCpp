expression     → assignment ;

assignment     → (call "." )? IDENTIFIER "=" assignment | logic_or ;

logic_or       → logic_and ( "or" logic_and )* ;

logic_and      → equality ( "and" equality )* ;

equality       → comparison ( ( "!=" | "==" ) comparison )* ;

comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term           → factor ( ( "-" | "+" ) factor )* ;

factor         → unary ( ( "/" | "*" ) unary )* ;

unary          → ( "!" | "-" ) unary | call ;

call           → primary ( "(" arguments? ")" | "." IDENTIFIER )* ;

primary        → NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER ;



arguments      → expression ( "," expression )* ;

parameters     → IDENTIFIER ( "," IDENTIFIER )* ;



program        → declaration* EOF ;

declaration    → classDecl | funDecl | varDecl | statement ;

statement      → exprStmt | forStmt | ifStmt | printStmt | returnStmt | whileStmt | block ;

exprStmt       → expression ";" ;

printStmt      → "print" expression ";" ;

varDecl        → "var" IDENTIFIER ( "=" expression )? ";" ;

block          → "{" declaration* "}" ;

ifStmt         → "if" "(" expression ")" statement ( "else" statement )? ;

whileStmt      → "while" "(" expression ")" statement ;

forStmt        → "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;

funDecl        → "fun" function ;

function       → IDENTIFIER "(" parameters? ")" block ;

returnStmt     → "return" expression? ";" ;

classDecl      → "class" IDENTIFIER "{" function* "}" ;
